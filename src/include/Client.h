/*
 * Copyright (C) Lei.Peng, All rights reserved.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * In addition, as a special exception, the copyright holders give
 * permission to link the code of portions of this program with the
 * OpenSSL library under certain conditions as described in each
 * individual source file, and distribute linked combinations
 * including the two.
 *
 * You must obey the GNU General Public License in all respects
 * for all of the code used other than OpenSSL.
 */
#ifndef CLIENT_H_
#define CLIENT_H_
/// All Classes of mPool is defined in name space MPool
namespace MPool {

/**
 * @brief Client Structure
 * */
class Client {
public:
	Client(std::string username);
	virtual ~Client();
	time_t getConnectTime();
	/// Heart break;
	void lastActive();
	time_t getLastHbTime();
	/**
	 * @brief Generate a new token
	 * @return The active token
	 *         -NULL when fail
	 *         -Token when success
	 * */
	std::string generateToken();
	/**
	 * @brief Get the token
	 * @return The active token
	 *         -NULL when fail
	 *         -Token when success
	 * */
	std::string getToken();
	std::string getUsername();
	/**
	 * @brief Set online status
	 * @param status: A for Active, O for Off-line
	 * @return The last online status
	 * */
	void pushSQL(std::string sql);
	void setSocket(int s); /// Set socket;
	int getSocket(); /// Return TCP socket;
	void setDBConnection(DB *db_con);
	DB* getDBConnection();
	void doWork();
	void wait();
	bool isTimeout();
	void setTimeout();
	bool isBusy();
	unsigned long getWorks();
protected:
	int socket; /// Socket file descriptor;
	std::string username; /// Just store the username
	std::string token; /// Token which is generated by server
	std::queue<std::string> sqls; /// Current query string;
	time_t connect_time; /// Connection Time
	time_t last_hb_time; /// Last Heart Break
	unsigned long queries; /// Number of queries sent by client
	unsigned long success_queries; /// Number of executed queries
	unsigned long failed_queries; /// Number of failed queries
	DB *db_con; /// DB connection;
	pthread_mutex_t work_mutex;
	pthread_mutex_t sql_mutex;
	Json::Reader *jsonReader;
	Json::FastWriter *jsonWriter;
	unsigned long works;
};

}

#endif /* CLIENT_H_ */
